#include <stdio.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

//#define path "test.txt"
#define MAC_STD 17
#define MAC_DELM_COL ':'
#define MAC_DELM_DAS '-'

static unsigned long deleteEntry( char*, size_t, const char* );

int isMacAddress(char *s)
{
    int i;
    int ret = 0;
    if(strlen(s) > MAC_STD)
       return ret;
    //2 5 8 11 14
    if( (s[2] == MAC_DELM_COL && s[5] == MAC_DELM_COL && s[8] == MAC_DELM_COL &&
                s[11] == MAC_DELM_COL && s[14] == MAC_DELM_COL ) ||
            (s[2] == MAC_DELM_DAS && s[5] == MAC_DELM_DAS && s[8] == MAC_DELM_DAS &&
             s[11] == MAC_DELM_DAS && s[14] == MAC_DELM_DAS ) )
    {
        for(i = 0; i < MAC_STD; i++)
        {
            if(s[i] == '\0')
               return ret;
            if(i % 3 != 2 && !isxdigit(s[i]))
               return ret;
        }
        return !ret;
    }
    return ret;
}

int xmain(char *path,char *word_2_search)
{

    struct stat st;
    int ret = -1;

    if(!isMacAddress(word_2_search))
    {
        printf("\n Not in formate");
        return ret;
    }
    if ( stat( path, &st ) != -1 )
    {
        FILE* fp = fopen( path, "rb" );
        if ( fp != NULL )
        {
            char* buffer = malloc( st.st_size );
            long tmp = st.st_size;
            //if ( fread(buffer, 1, st.st_size, fp) == tmp)//((long)st.st_size))
            if ( fread(buffer, 1, st.st_size, fp) ==  (unsigned long)st.st_size)
            {
                fclose(fp);
                unsigned long newSize = deleteEntry( buffer, st.st_size, word_2_search ); //X
                if(newSize == 0)
                {
                    printf("\n No Found ...");
                }
                else
                {
                    fp = fopen( path, "wb" );
                    if ( fp != NULL )
                    {
                        fwrite(buffer, 1, newSize, fp);
                        fclose(fp);
                        ret = 0;
                   }
                    else
                    {
                        return ret;
                    }
                }
            }
            free(buffer);
        }
        else
        {
            return ret;
        }
    }
    else
    {
        printf( "did not find %s", path );
    }
    return ret;
}

static unsigned long deleteEntry( char* buffer, size_t size, const char* macaddress_to_search )
{
    char* p = buffer;
    bool done = false;
    size_t len = strlen(macaddress_to_search);
    unsigned long newSize = 0;//X
    do
    {
        char* q = strchr( p, *macaddress_to_search );
        if ( q != NULL )
        {
            if ( strncmp( q, macaddress_to_search, len ) == 0 )
            {
                unsigned long lineSize = 1; //X
                char *line = q;
                for ( ; *line != '\n'; ++line)
                {
                    ++lineSize;
                }

                // obtain left over length and adjust length
                size_t restSize = (size_t)((buffer + size) - (q + lineSize));
                memmove( q, q + lineSize, restSize );
                newSize = size - lineSize;
                done = true;
            }
            else
            {
                p = q + 1;
            }
        }
        else
        {
            done = true;
        }
    }
    while (!done);

    return newSize;
}


int main()
{
    char word_2_search[100]={0};
    printf("\n Enter Word to be removed");
    scanf("%s",word_2_search);

    if(xmain("test.txt",word_2_search) < 0)
        printf("\n Error occured");
    else
        printf("\n All fine");
}

